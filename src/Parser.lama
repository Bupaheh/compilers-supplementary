-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

fun exprHelper(op) {
  [s (op), fun (l, s, r) { Binop (op, l, r) }]
}

-- Primary expression
var primary = memo $ eta syntax (
      x=decimal {Const (stringInt (x))} |
      x=lident  {Var (x)}               |
      inbr[s("("), exp, s(")")]
    ),
    exp = memo $ eta expr ({
        [Left, { exprHelper ("!!") }],
        [Left, { exprHelper ("&&") }],
        [Nona, {
          exprHelper ("=="),
          exprHelper ("!="),
          exprHelper ("<"),
          exprHelper ("<="),
          exprHelper (">"),
          exprHelper (">=")
        }],
        [Left, {
          exprHelper ("+"),
          exprHelper ("-")
        }],
        [Left, {
          exprHelper ("*"),
          exprHelper ("/"),
          exprHelper ("%")
        }]
      }, 
      primary
    );

var stmt = memo $ eta syntax (
  kSkip { Skip } |
  l=lident s[":="] r=exp { Assn (l, r) } |
  kWrite l=inbr[s("("), exp, s(")")] { Write (l) } |
  kRead l=inbr[s("("), lident, s(")")] { Read (l) }
);

var stmts = memo $ eta syntax (
  l=stmt s[";"] r=stmts { Seq (l, r) } |
  stmt
);

-- Public top-level parser
public parse = stmts;
             
