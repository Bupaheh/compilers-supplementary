-- Expression evaluator

import List;
import Array;
import State;
import World;
import Lexer;
import Parser;
import Fun;
import Builtins;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (expr, expr)         |
--        Set     (string, expr)       |
--        Seq     (expr, expr)         |
--        Skip                         |
--        if      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Call    (string, expr list)  |
--        Ignore  (expr)               |
--        String  (string)             |
--        Array   (expr list)          |
--        Elem    (expr, expr)         |
--        ElemRef (expr, expr)         |
--        Builtin (string, expr list)

-- Helper function: checks that given name designates a regular variable in
-- a given state
fun lookupVal (state, name) {
  case state.lookup (name) of
    x@Val (_) -> x
  | _         -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
  esac
}

-- Helper function: checks that given name designates a function in
-- a given state
fun lookupFun (state, name) {
  case state.lookup (name) of
    x@Fun (_, _) -> x
  | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
  esac
}

-- Helper function: adds a bunch of regular variables current scope
fun addNames (state, names) {
  foldl (fun (s, name) {s.addName (name, Val (0))}, state, names)
}

-- Helper function: adds a function in current scope
fun addFunction (state, name, args, body) {
  state.addName (name, Fun (args, body))
}

fun addNamesValues (state, names, values) {
  foldl (fun (s, [name, v]) {s.addName (name, v)}, state, zip (names, values))
}
                                        
-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun evalDefs (st, defs) {
  foldl (
    fun (s, def) {
      case def of
        Var (names) -> s.addNames (names)
      | Fun (name, args, body) -> s.addFunction (name, args, body)
      esac
    },
    st,
    defs
  )
}

fun eval (c@[st, w], expr) {
  case expr of
    Var (s) -> [c, st.lookup (s)]
  | Const (v) -> [c, v]
  | Binop (op, a, b) -> 
      case evalList (c, {a, b}) of
        [c, {a, b}] -> [c, evalOp (op, a, b)]
      esac
  | Ref (s) -> [c, RefVal (s)]
  | Skip -> [c, Bottom]
  | Assn (s, ex) ->
      case evalList (c, {s, ex}) of
        [[st, w], { RefVal (s), ex }] -> [[st <- [s, ex], w], ex]
      | [c, { ElemRef (arr, i), ex }] -> arr[i] := ex; [c, ex]
      esac
  | Seq (s1, s2) -> 
      case evalList (c, {s1, s2}) of
        [c, {_, s2}] -> [c, s2]
      esac
  | If (ex, t, f) ->
      case eval (c, ex) of
        [c, 0] -> eval (c, f)
      | [c, _] -> eval (c, t)
      esac
  | t@While (ex, s) ->
      case eval (c, ex) of
        [c, 0] -> [c, Bottom]
      | [c, _] -> eval (c, Seq (s, t))
      esac
  | DoWhile (s, ex) -> eval (c, Seq (s, While (ex, s)))
  | Ignore  (ex) -> [eval (c, ex).fst, Bottom]
  | Scope (defs, s) ->
    case evalDefs (st.enterScope, defs) of
      st -> 
        case eval ([st, w], s) of
          [[st, w], v] -> [[st.leaveScope, w], v]
        esac
    esac
  | Call (name, args) ->
      case st.lookup (name) of
        Fun (argNames, External) -> eval (c, Builtin (name, args))
      | Fun (argNames, body) ->
          case evalList (c, args) of
            [[st, w], args] ->
              case st.enterFunction of
                st2 ->
                  case st2.addNamesValues (argNames, args) of
                    st2 -> 
                      case eval ([st2, w], body) of
                        [[st2, w], v] -> [[st.leaveFunction (st2.getGlobal), w], v]
                      esac
                  esac
              esac
          esac
      esac
  | Set (name, ex) ->
      case eval (c, ex) of
        [[st, w], v] -> [[st <- [name, v], w], v]
      esac
  | Array (exprs) ->
    case evalList (c, exprs) of
      [c, elems] -> [c, listArray (elems)]
    esac
  | Elem (ex1, ex2) ->
      case evalList (c, { ex1, ex2 }) of
        [c, { Sexp (_, arr), i }] -> [c, arr[i]]
      | [c, { arr, i }] -> [c, arr[i]]
      esac
  | ElemRef (ex1, ex2) ->
      case evalList (c, { ex1, ex2 }) of
        [c, { arr, i }] -> [c, ElemRef (arr, i)]
      esac
  | Sexp (name, exprs) ->
      case evalList (c, exprs) of
        [c, elems] -> [c, Sexp (name, listArray (elems))]
      esac
  | Builtin (name, exprs) -> 
      case evalList (c, exprs) of
        [[st, w], args] -> 
          case evalBuiltin (name, args, w) of
            [v, w] -> [[st, w], v]
          esac
      esac
  | String (s) -> [c, s]
  esac
}


-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState ().enterScope.addName ("read",   Fun ({}, External))
                                      .addName ("write",  Fun ({"a"}, External))
                                      .addName ("length", Fun ({"a"}, External)), createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
