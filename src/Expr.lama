-- Expression evaluator

import List;
import State;


-- The evaluator itself: takes a state and an expression,
-- returns integer value
--
-- An expression is represented by a data structure of the following shape:
--
-- expr = Var   (string)             |
--        Const (int)                |
--        Binop (string, expr, expr)

public fun evalExpr (st, ex) {
  case ex of
    Var (s) -> st (s)
  | Const (v) -> v
  | Binop (s, a, b) ->
      case s of
        "+" -> evalExpr(st, a) + evalExpr(st, b)
      | "-" -> evalExpr(st, a) - evalExpr(st, b)
      | "*" -> evalExpr(st, a) * evalExpr(st, b)
      | "/" -> evalExpr(st, a) / evalExpr(st, b)
      | "%" -> evalExpr(st, a) % evalExpr(st, b)
      | "==" -> evalExpr(st, a) == evalExpr(st, b)
      | "!=" -> evalExpr(st, a) != evalExpr(st, b)
      | "<" -> evalExpr(st, a) < evalExpr(st, b)
      | "<=" -> evalExpr(st, a) <= evalExpr(st, b)
      | ">" -> evalExpr(st, a) > evalExpr(st, b)
      | ">=" -> evalExpr(st, a) >= evalExpr(st, b)
      | "&&" -> evalExpr(st, a) && evalExpr(st, b)
      | "!!" -> evalExpr(st, a) !! evalExpr(st, b)
      esac
  esac
}