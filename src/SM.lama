-- Stack machine.

import Ref;
import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Parser;
import Lexer;
import Expr;
import Builtins;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  -- Shows a location (a reference to function argument, local or global variable)
  fun showLoc (d) {
    case d of
      Arg (i) -> sprintf ("arg[%d]", i)
    | Loc (i) -> sprintf ("loc[%d]", i)
    | Glb (x) -> sprintf ("%s", x)
    esac
  }
  
  case i of
    BINOP  (s)       -> sprintf ("BINOP %s", s)
  | LD     (x)       -> sprintf ("LD %s", showLoc (x))
  | LDA    (x)       -> sprintf ("LDA %s", showLoc (x))
  | ST     (x)       -> sprintf ("ST %s", showLoc (x))
  | STI              -> "STI"
  | SEXP   (s, n)    -> sprintf ("SEXP ""%s"", %d", s, n)
  | CONST  (n)       -> sprintf ("CONST %d", n)
  | LABEL  (s)       -> sprintf ("LABEL %s", s)
  | JMP    (l)       -> sprintf ("JMP %s", l)
  | CJMP   (c, l)    -> sprintf ("CJMP %s, %s", c, l)
  | CALL   (f, n)    -> sprintf ("CALL %s, %d", f, n)
  | BEGIN  (f, a, l) -> sprintf ("BEGIN %s, %d, %d", f, a, l)
  | GLOBAL (x)       -> sprintf ("GLOBAL %s", x)
  | END              -> sprintf ("END")
  | DUP              -> "DUP"
  | DROP             -> "DROP"
  | STRING (s)       -> sprintf ("STRING ""%s""", s)
  | ARRAY  (n)       -> sprintf ("ARRAY %d", n)
  | STA              -> "STA"
  | ELEM             -> "ELEM"
  | BUILTIN (f, n)   -> sprintf ("BUILTIN %s, %d", f, n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, a world and a program,
-- returns a final output
fun eval (env, w, insns) {
  -- Global state maps names of global variables to values
  var globalState = ref (fun (x) {error (sprintf ("name ""%s"" is undefined", x), getLoc (x))});
  
  -- Make a fresh local state: a pair of arrays for arguments and local variables;
  -- takes the numbers of arguments and local variables respectively
  fun makeState (a, l) {
    [initArray (a, fun (_) {0}), initArray (l, fun (_) {0})]
  }

  -- Lookups a location in local/global states
  fun lookup ([args, locs], loc) {
    case loc of
      Arg (i) -> args[i]
    | Loc (i) -> locs[i]
    | Loc (i) -> locs[i]
    | Glb (x) -> deref (globalState) (x)
    esac 
  }

  -- Assigns a value to a location
  fun assign ([args, locs], loc, vl) {
    case loc of
      Arg (i) -> args[i] := vl
    | Loc (i) -> locs[i] := vl
    | Glb (x) -> var g = deref (globalState);
                 globalState ::= fun (y) {if compare (x, y) == 0 then vl else g (y) fi}
    esac
  }

  -- Takes n positions from the list, retursn a pair: the remaining list and the taken
  -- sublist
  fun take (list, n) {
    fun inner (n, acc, list) {
      if n == 0
      then [list, acc]
      else inner (n-1, list.hd : acc, list.tl)
      fi
    }

    inner (n, {}, list)
  }

  fun cjmpCond (type, z) {
    case type of
      Z -> z == 0
    | NZ -> z != 0
    esac
  }

  fun createLocal (st, nArgs, nLocals) {
    -- printf ("#########\n");
    -- printf ("%s\n", st.string);
    case makeState (nArgs, nLocals) of
      state ->
        case take (st, nArgs) of
          [st, args] -> 
            foldl (fun (i, arg) { assign (state, Arg (i), arg); i + 1 }, 0, args);
            [st, state]
        esac
    esac

  }

  fun evalInstr(env, c@[stack, cst, state, world@[in, out]], instr, insns) {
    -- printf ("------------\n");
    -- printf ("%s\n", instr.string);
    -- printf ("%s\n", stack.string);
    case instr of
      LD    (x) -> [[lookup (state, x) : stack, cst, state, world], insns]
    | ST    (x) -> 
        case stack of
          z : _ -> assign (state, x, z); [[stack, cst, state, world], insns]
        esac
    | CONST (n) -> [[n : stack, cst, state, world], insns]
    | BINOP (s) -> 
        case stack of
          b : a : newStack -> [[evalOp(s, a, b) : newStack, cst, state, world], insns]
        esac
    | LABEL (_) -> [c, insns]
    | JMP (l) -> [c, fromLabel (env, l)]
    | CJMP (type, l) ->
        case stack of
          z : newStack ->
            if cjmpCond (type, z)
            then [[newStack, cst, state, world], fromLabel (env, l)]
            else [[newStack, cst, state, world], insns]
            fi
        esac
    | DUP ->
        case stack of
          v : newStack -> [[v : stack, cst, state, world], insns]
        esac
    | LDA (s) -> [[RefVal (s) : stack, cst, state, world], insns]
    | DROP ->
        case stack of
          v : newStack -> [[newStack, cst, state, world], insns]
        esac
    | GLOBAL (s) -> assign (state, Glb (s), 0); [[stack, cst, state, world], insns]
    | CALL (fLabel, _) -> [[stack, [state, insns] : cst, state, world], fromLabel (env, fLabel)]
    | END ->
        case cst of
          {} -> [c, {}]
        | [state, insns] : cst -> [[stack, cst, state, world], insns]
        esac
    | BEGIN (_, nArgs, nLocals) ->
        case createLocal (stack, nArgs, nLocals) of
          [st, state] -> [[st, cst, state, world], insns]
        esac
    | STRING (s) -> [[s : stack, cst, state, world], insns]
    | ARRAY (n) ->
        case take (stack, n) of
          [st, elems] -> [[listArray (elems) : st, cst, state, world], insns]
        esac
    | SEXP (name, n) ->
        case take (stack, n) of
          [st, elems] -> [[Sexp (name, listArray (elems)) : st, cst, state, world], insns]
        esac
    | ELEM ->
        case stack of
          i : Sexp (_, arr) : st -> [[arr[i] : st, cst, state, world], insns]
        | i : arr : st -> [[arr[i] : st, cst, state, world], insns]
        esac
    | BUILTIN (name, n) -> 
        case take (stack, n) of
          [st, args] -> 
            case evalBuiltin (name, args, world) of
              [v, world] -> [[v : st, cst, state, world], insns]
            esac
        esac
    | STA ->
        case stack of
          v : _ : RefVal(s) : newStack -> assign (state, s, v); [[v : newStack, cst, state, world], insns]
        | v : i : arr : newStack -> arr[i] := v; [[v : newStack, cst, state, world], insns]
        esac
    esac
  }

  -- Core interpreter: takes a configuration and a program, returns a configuration
  fun eval (c@[st, cst, s, w], insns) {
    -- printf ("%s\n", insns.string);
    -- failure ("f");
    case insns of
      i : newInsns -> 
        case evalInstr (env, c, i, newInsns) of
          [c, insns] -> eval (c, insns)
        esac
    | _ -> c
    esac
  }
  
  
  eval ([{}, {}, makeState (0, 0), w], insns) [3].getOutput
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), createWorld (input), insns)
}

-- Compilation environment: generates labels
fun makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, functions) {
  -- Generates a new label
  fun genLabel () {
    [sprintf ("L%d", nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
  }

  -- Adds a new function 
  fun rememberFun (fLabel, args, body) {
    makeCompEnv (nLabels,
                 scopeDepth,
                 state,
                 nLocals,
                 nArgs,
                 Fun (fLabel, args, body, state) : functions)
  }

  -- Enters a local scope
  fun beginScope () {
    makeCompEnv (nLabels, scopeDepth+1, enterScope (state), nLocals, nArgs, functions)
  }

  -- Leaves a local scope
  fun endScope () {
    makeCompEnv (nLabels, scopeDepth-1, leaveScope (state), nLocals, nArgs, functions)
  }

  -- Adds an argument for the current function
  fun addArg (name) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Arg (nArgs)), nLocals, nArgs+1, functions)
  }

  -- Adds a variable in the scope
  fun addVar (name) {
    if isGlobal ()
    then makeCompEnv (nLabels, scopeDepth, addName (state, name, Glb (name, true)), nLocals, nArgs, functions)
    else makeCompEnv (nLabels, scopeDepth, addName (state, name, Loc (nLocals, true)), nLocals+1, nArgs, functions)
    fi
  }

  -- Adds a value in the scope
  fun addVal (name) {
    if isGlobal ()
    then makeCompEnv (nLabels, scopeDepth, addName (state, name, Glb (name, false)), nLocals, nArgs, functions)
    else makeCompEnv (nLabels, scopeDepth, addName (state, name, Loc (nLocals, false)), nLocals+1, nArgs, functions)
    fi
  }

  -- Adds a binding for a function
  fun addFun (name, fLabel, nargs) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Fun (fLabel, nargs)), nLocals, nArgs, functions)
  }
  
  -- Enters a function
  fun beginFun (state) {
    makeCompEnv (nLabels, 2, enterFunction (state), 0, 0, functions)
  }

  -- Get functions and empty functions list
  fun getFuns () {
    [functions, makeCompEnv (nLabels, scopeDepth, state, nArgs, nLocals, {})]
  }

  -- Lookups variable
  fun lookupVar (name) {
    case lookup (state, name) of
      Loc (i, true) -> Loc (i)
    | Glb (x, true) -> Glb (x)
    | _             -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
    esac
  }

  -- Lookups value
  fun lookupVal (name) {
    case lookup (state, name) of
      Loc (i, _) -> Loc (i)
    | Glb (x, _) -> Glb (x)
    | Arg (i)    -> Arg (i)
    | _          -> error (sprintf ("the name ""%s"" does not designate a value", name), getLoc (name))
    esac
  }
  
  -- Lookups a name of a function
  fun lookupFun (name) {
    case lookup (state, name) of
      x@Fun (_, _) -> x
    | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
    esac
  }

  -- Gets the number of local variables
  fun getLocals () {
    nLocals
  }

  -- Generates an intrinsic function name
  fun genFunLabel (name) {
     if isGlobal ()
     then [sprintf ("L%s", name),             makeCompEnv (nLabels  , scopeDepth, state, nLocals, nArgs, functions)]
     else [sprintf ("L%s_%d", name, nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
     fi 
  }

  -- Checks if the current scope is a global
  fun isGlobal () {
    scopeDepth == 2
  }
  
  [genLabel,
   rememberFun,
   beginScope,
   endScope,
   addArg,
   addVar,
   addVal,
   beginFun,
   getFuns,
   lookupVar,
   lookupVal,
   lookupFun,
   getLocals,
   genFunLabel,
   addFun,
   isGlobal
  ]
}

-- Initialize a new compilation environment
fun initCompEnv () {
  makeCompEnv (0, 0, emptyState (), 0, 0, {})
}

-- Accessor functions
fun genLabel (env) {
  env [0] ()
}

fun rememberFun (env, name, args, body) {
  env [1] (name, args, body)
}

fun beginScope (env) {
  env [2] ()
}

fun endScope (env) {
  env [3] ()
}

fun addArg (env, name) {
  env [4] (name)
}

fun addVar (env, name) {
  env [5] (name)
}

fun addVal (env, name) {
  env [6] (name)
}

fun beginFun (env, state) {
  env [7] (state)
}

fun getFuns (env) {
  env [8] ()
}

fun lookupVar (env, name) {
  env [9] (name)
}

fun lookupVal (env, name) {
  env [10] (name)
}

fun lookupFun (env, name) {
  env [11] (name)
}

fun getLocals (env) {
  env [12] ()
}

fun genFunLabel (env, name) {
  env [13] (name)
}

fun addFun (env, name, fLabel, nargs) {
  env [14] (name, fLabel, nargs)
}

fun isGlobal (env) {
  env [15] ()
}

-- Helper function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case genLabel (env) of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Helper function: adds a bunch of arguments
fun addArgs (env, names) {
  foldl (fun (env, name) {addArg (env, name)}, env, names)
}

-- Helper function: adds a bunch of local variables
fun addVars (env, names) {
  foldl (fun (env, name) {addVar (env, name)}, env, names)
}

-- Helper function: adds a bunch of locals values
fun addVals (env, names) {
  foldl (fun (env, name) {addVal (env, name)}, env, names)
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.


-- Some guidelines for compiling functions and scopes.
--
-- 1. use env.beginScope/env.endScope properly;
-- 2. in each scope traverse the definitions twice:
--    a. first, add all bindings into symbolic state,
--       using end.addVar/env.addFun;
--    b. do not forget to generate GLOBAL instructions for
--       top-level variable declarations;
--    c. on the secord traversal add functions themselves for
--       future code generation (use env.rememberFun).
-- 3. the overall flow for codegeneration:
--    a. generate the code for thetopmost expression (the progrman itself);
--    b. take list of nested functions definitions via env.getFuns and
--       generate the code for each function;
--    c. repeat b. until no function definitions appear.
-- 4. when compiling functions, do not forget to create proper
--    environment (use env.beginFun) and register arguments
--    (use env.addArg).

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.
-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  fun label (lab, labUsed) {
    if labUsed
    then singletonBuffer (LABEL (lab))
    else emptyBuffer ()
    fi
  }

  fun compileDefs (env, defs) {
    foldl (fun ([env, funs, globalDefs], def) {
      case def of
        Var (ds) -> [addVars (env, ds), funs, if isGlobal (env) 
                                             then foldr (fun (globalDefs, name) { singletonBuffer (GLOBAL (name)) <+> globalDefs }, globalDefs, ds)
                                             else globalDefs
                                             fi]
      | Fun (name, args, body) ->
          case genFunLabel (env, name) of
            [fLabel, env] -> [addFun (env, name, fLabel, size (args)), [fLabel, args, body] : funs, globalDefs]
          esac
      esac
    }, [env, {}, emptyBuffer ()], defs)
  }

  fun rememberFuns (env, funs) {
    foldl (fun (env, [fLabel, args, body]) { rememberFun (env, fLabel, args, body) }, env, funs)
  }

  fun compileArgs (env, args) {
    foldl (
      fun ([env, code], arg) {
        case genLabel (env) of
          [l, env] ->
            case compile (l, env, arg) of
              [lUsed, env, argCode] -> [env, code <+> argCode <+> label (l, lUsed)]
            esac
        esac
      },
      [env, emptyBuffer ()],
      args
    )
  }
  
  fun compile (lab, env, stmt) {
    case stmt of
      Skip              -> [false, env, emptyBuffer ()]
    | Var    (x)        -> [false, env, singletonBuffer (LD (lookupVal (env, x)))]
    | Ref    (x)        -> [false, env, singletonBuffer (LDA (lookupVar (env, x))) <+ LDA (lookupVar (env, x))]
    | Const  (n)        -> [false, env, singletonBuffer (CONST (n))]
    | Binop (s, a, b)   -> 
        case genLabels (env, 2) of
          [l1, l2, env] ->
            case compile (l1, env, a) of
              [l1Used, env, aCode] ->
                case compile (l2, env, b) of
                  [l2Used, env, bCode] -> [false, env, aCode <+> label (l1, l1Used) <+> bCode <+> label (l2, l2Used) <+ BINOP (s)]
                esac
            esac
        esac
    | Assn  (v, ex) -> 
        case genLabels (env, 2) of
          [l1, l2, env] ->
            case compile (l1, env, v) of
              [l1Used, env, vCode] ->
                case compile (l2, env, ex) of
                  [l2Used, env, exCode] -> 
                    case v of
                      Ref (s) -> [false, env, exCode <+> label (l2, l2Used) <+ ST (lookupVar (env, s))]
                    | _ -> [false, env, vCode <+> label (l1, l1Used) <+> exCode <+> label (l2, l2Used) <+ STA]
                    esac
                esac
            esac
        esac
    | Seq (s1, s2)    ->
        case genLabel (env) of
          [s2Lab, env] ->
             case compile (s2Lab, env, s1) of
               [s2LabUsed, env, s1Code] ->
                  case compile (lab, env, s2) of
                    [labUsed, env, s2Code] -> [labUsed, env, s1Code <+> label (s2Lab, s2LabUsed) <+> s2Code]
                  esac
             esac
        esac
    | If (cond, t, f) ->
      case genLabels (env, 2) of
        [condLab, fLab, env] ->
          case compile (condLab, env, cond) of
            [condUsed, env, condCode] ->
              case compile (lab, env, t) of
                [_, env, tCode] ->
                  case compile (lab, env, f) of
                    [_, env, fCode] -> 
                      [true, env, condCode <+> label (condLab, condUsed) <+ CJMP (Z, fLab) <+> tCode <+ JMP (lab) <+ LABEL (fLab) <+> fCode]
                  esac
              esac
          esac
      esac
    | While (cond, s) ->
      case genLabels (env, 3) of
        [postCondLab, condLab, stepLab, env] ->
          case compile (postCondLab, env, cond) of
            [postCondUsed, env, condCode] ->
              case compile (condLab, env, s) of
                [_, env, stepCode] ->
                  [false, env, 
                    singletonBuffer (JMP (condLab)) <+ LABEL (stepLab) <+> stepCode 
                      <+ LABEL (condLab) <+> condCode <+> label (postCondLab, postCondUsed) <+ CJMP (NZ, stepLab) ]
              esac
          esac
      esac
    | DoWhile (s, cond) ->
      case genLabels (env, 3) of
        [postCondLab, condLab, stepLab, env] ->
          case compile (postCondLab, env, cond) of
            [postCondUsed, env, condCode] ->
              case compile (condLab, env, s) of
                [condLabUsed, env, stepCode] ->
                  [false, env, 
                    singletonBuffer (LABEL (stepLab)) <+> stepCode <+> label (condLab, condLabUsed)
                      <+> condCode <+> label (postCondLab, postCondUsed) <+ CJMP (NZ, stepLab) ]
              esac
          esac
      esac
    | Ignore (ex) ->
        case genLabel (env) of
          [l, env] ->
            case compile (l, env, ex) of
              [lUsed, env, code] -> [false, env, code <+> label (l, lUsed) <+ DROP]
            esac
        esac
    | Scope (defs, ex) ->
        case compileDefs (beginScope (env), defs) of
          [env, funs, globalDefs] -> 
            case compile (lab, rememberFuns (env, funs), ex) of
              [lUsed, env, code] -> [lUsed, endScope (env), globalDefs <+> code]
            esac
        esac
    | Call (name, args) ->
        case lookupFun (env, name) of
          Fun (fLabel, nargs) -> 
            if fLabel[0] == '$'
            then compile (lab, env, Builtin (name, args))
            else
              case compileArgs (env, args) of
                [env, code] -> [false, env, code <+ CALL (fLabel, nargs)]
              esac
            fi
        esac
    | Set (name, ex) -> compile (lab, env, Assn (Ref (name), ex))
    | Array (exprs) -> 
        case compileArgs (env, exprs) of
          [env, code] -> [false, env, code  <+ ARRAY (size (exprs))]
        esac
    | String (s) -> [false, env, singletonBuffer (STRING (s))]
    | Elem (ex1, ex2) -> 
        case genLabels (env, 2) of
          [l1, l2, env] ->
            case compile (l1, env, ex1) of
              [l1Used, env, code1] ->
                case compile (l2, env, ex2) of
                  [l2Used, env, code2] -> [false, env, code1 <+> label (l1, l1Used) <+> code2 <+> label (l2, l2Used) <+ ELEM]
                esac
            esac
        esac
    | ElemRef (ex1, ex2) ->
        case genLabels (env, 2) of
          [l1, l2, env] ->
            case compile (l1, env, ex1) of
              [l1Used, env, code1] ->
                case compile (l2, env, ex2) of
                  [l2Used, env, code2] -> [false, env, code1 <+> label (l1, l1Used) <+> code2 <+> label (l2, l2Used)]
                esac
            esac
        esac
    | Sexp (name, exprs) ->
        case compileArgs (env, exprs) of
          [env, code] -> [false, env, code <+ SEXP (name, size (exprs))]
        esac
    | Builtin (name, exprs) -> 
        case lookupFun (env, name) of
          Fun (_, nargs) -> 
            case compileArgs (env, exprs) of
              [env, code] -> [false, env, code <+ BUILTIN (name, nargs)]
            esac
        esac
    | _                 ->  failure ("compileSM not implemented\n")
    esac
  }

  fun compileFunctions (env, code) {
    fun helper (env, funs) {
      case funs of
        {} -> 
          case getFuns (env) of
            [{}, env] -> emptyBuffer ()
          | [funs, env] -> helper (env, funs)
          esac
      | Fun (fLabel, args, body, state) : funs ->
          case genLabel (addArgs (beginFun (env, state), args)) of
            [l, env] ->
              case compile (l, env, body) of
                [lUsed, env, code] -> 
                  singletonBuffer (LABEL (fLabel))
                    <+ BEGIN (fLabel, size (args), getLocals (env))
                    <+> code
                    <+> label (l, lUsed)
                    <+ END
                    <+> helper (env, funs)
              esac
          esac
      esac
    }

    code <+> helper (env, {})
  }

  case initCompEnv ().beginScope.addFun ("read"  , "$read"  , 0)
                                .addFun ("write" , "$write" , 1)
                                .addFun ("length", "$length", 1).genLabel of
    [endLab, env] ->
       case compile (endLab, env, stmt) of
        [endLabUsed, env, code] -> 
          getBuffer $ compileFunctions (
                        env, 
                        singletonBuffer (LABEL ("main")) 
                          <+ BEGIN ("main", 0, getLocals (env)) 
                          <+> code 
                          <+> label (endLab, endLabUsed) 
                          <+ END
                      )
       esac
  esac
}