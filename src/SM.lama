-- Stack machine.

import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ      -> sprintf ("READ")
  | WRITE     -> sprintf ("WRITE")
  | BINOP (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | CONST (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

fun evalInstr([stack, state, world@[in, out]], instr) {
    case instr of
      READ      -> 
        case readWorld (world) of
          [z, newWorld] -> [z : stack, state, newWorld]
        esac
    | WRITE     -> 
        case stack of
          z : newStack -> [newStack, state, writeWorld (z, world)]
        esac
    | LD    (x) -> [state (x) : stack, state, world]
    | ST    (x) -> 
        case stack of
          z : newStack -> [newStack, state <- [x, z], world]
        esac
    | CONST (n) -> [n : stack, state, world]
    | BINOP (s) -> 
        case stack of
          b : a : newStack -> [evalOp(s, a, b) : newStack, state, world] 
        esac
    esac
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (c, insns) {
  case insns of
    i : newInsns -> eval (evalInstr (c, i), newInsns)
  | _            -> c
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine instructions
fun compileExpr (expr) {
  case expr of
    Var (s) -> { LD (s) }
  | Const (v) -> { CONST (v) }
  | Binop (s, a, b) -> compileExpr(a) +++ compileExpr(b) +++ { BINOP (s) }
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  case stmt of
    Skip -> {}
  | Assn (s, ex) -> compileExpr (ex) +++ { ST (s) }
  | Seq (s1, s2) -> compileSM (s1) +++ compileSM (s2)
  | Write (ex) -> compileExpr (ex) +++ { WRITE }
  | Read (s) -> { READ, ST (s) }
  esac
}
