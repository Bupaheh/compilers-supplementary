-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn   (string, expr)     |
--        Seq    (stmt, stmt)       |
--        Skip                      |
--        Read   (string)           |
--        Write  (expr)             |
--        If      (expr, stmt, stmt) |
--        While   (expr, stmt)       |
--        DoWhile (stmt, expr)

fun eval (c@[state, world], stmt) {
  case stmt of
    Skip -> c
  | Assn (s, ex) -> [state <- [s, evalExpr (state, ex)], world]
  | Seq (s1, s2) -> eval(eval(c, s1), s2)
  | Write (ex) -> [state, writeWorld (evalExpr (state, ex), world)]
  | Read (s) ->
      case readWorld (world) of
        [n, w] -> [state <- [s, n], w]
      esac
  | If (ex, t, f) ->
      case evalExpr (state, ex) of
        true -> eval (c, t)
      | false -> eval (c, f)
      esac
  | While (ex, s) ->
      case evalExpr (state, ex) of
        true -> eval (eval (c, s), While (ex, s))
      | false -> c
      esac
  | DoWhile (s, ex) -> eval (eval (c, s), While (ex, s))
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}