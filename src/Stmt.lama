-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn   (string, expr)     |
--        Seq    (stmt, stmt)       |
--        Skip                      |
--        Read   (string)           |
--        Write  (expr)             |

fun eval (c, stmt) {
  var state = c[0]; 
  var world = c[1]; 
  case stmt of
    Skip -> c
  | Assn (s, ex) -> [state <- [s, evalExpr (state, ex)], world]
  | Seq (s1, s2) -> eval(eval(c, s1), s2)
  | Write (ex) -> [state, writeWorld (evalExpr (state, ex), world)]
  | Read (s) -> (
      var r = readWorld (world);
      world := r[1];
      [state <- [s, r[0]], world]
  )
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
